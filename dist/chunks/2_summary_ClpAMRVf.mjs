const id = "guides/2_summary.mdx";
						const collection = "docs";
						const slug = "guides/2_summary";
						const body = "\nimport { Card, CardGrid, Aside, Code, Steps } from '@astrojs/starlight/components';\nimport { Image } from 'astro:assets';\nimport workflow_summary_light from '/src/assets/summary_workflow/workflow_summary_light.png';\nimport workflow_summary_dark from '/src/assets/summary_workflow/workflow_summary_dark.png';\nimport milestone_example from '/src/assets/summary_workflow/milestone_example.png';\nimport issue_example from '/src/assets/summary_workflow/issue_example.png';\nimport assign_example from '/src/assets/summary_workflow/assign_example.mp4';\nimport qc_feedback1 from '/src/assets/summary_workflow/qc_feedback1.png';\nimport qc_feedback2 from '/src/assets/summary_workflow/qc_feedback2.png';\nimport qc_feedback3 from '/src/assets/summary_workflow/qc_feedback3.png';\nimport qc_feedback4 from '/src/assets/summary_workflow/qc_feedback4.mp4';\nimport qc_feedback5 from '/src/assets/summary_workflow/qc_feedback5.png';\nimport resolve1mp4 from '/src/assets/summary_workflow/resolve1.mp4';\nimport resolve1png from '/src/assets/summary_workflow/resolve1.png';\nimport issue_closed from '/src/assets/summary_workflow/issue_closed.mp4';\nimport milestone_closed from '/src/assets/summary_workflow/milestone_closed.mp4';\nimport record1 from '/src/assets/summary_workflow/record1.mp4';\nimport record1_png from '/src/assets/summary_workflow/record1.png';\nimport record2_png from '/src/assets/summary_workflow/record2.png';\nimport record3_png from '/src/assets/summary_workflow/record3.png';\n\n\n## GitHub Issues and Milestones\n\nIn the ghqc workflow:\n- An Issue is created for each project file selected for QC\n    - Each Issue is associated with a QC checklist and an assigned QCer\n- A set of Issues is organized into a Milestone\n    - A Milestone may correspond to a deliverable or a phase of work\n\n\n![assign_diagram](/assign_diagram.png)\n\n## Workflow Diagram \n\n<Image src={workflow_summary_light} className=\"light:sl-hidden\" alt=\"summary workflow light\"/>\n<Image src={workflow_summary_dark} className=\"dark:sl-hidden\" alt=\"summary workflow dark\"/> \n\n\n## Author: Assign files for QC\n\n\nexport const assignAppCode = `# library(ghqc)\nghqc_assign_app()`;\nexport const console = 'console';\n\n\n<Steps>\n\n1. The Author pushes final changes to the set of files for QC review\n\n2. The Author runs the Assign shiny app to:\n    - notify the QCer that files assigned to her are ready for review\n    - publish each file's QC checklist to GitHub with the correct commit and branch for the QCer to checkout\n\n    <Code code={assignAppCode} lang=\"R\" title={console} />\n\n\n</Steps>\n\n### Example\n\nHere is an example GitHub Milestone:\nIt has 3 Issues, each named for the relative path of its corresponding file.\n\n<Aside>\nTo navigate to this page in the remote project repository, click the \"Issues\" tab, then click on the \"Milestones\" banner.\n</Aside>\n\n<Image src={milestone_example} alt=\"milestone_example\"/>\n\nWithin this set of Issues, here is scripts/DA/study1_da.qmd:\n\n<Image src={issue_example} alt=\"issue_example\"/>\n\n### Demo \n\n<Code code={assignAppCode} lang=\"R\" title={console} />\n\n<video controls width = \"700\">\n    <source src={assign_example} type=\"video/mp4\" />\n</video>\n\n## QCer: Review each assigned file\n\nexport const gitLogCode = `git log --oneline -1`;\nexport const terminal = 'terminal';\n\n\n\n<Steps>\n\n1. The QCer clones the repository.\n\n2. The QCer runs the following git command to get the current local commit:\n\n    <Code code={gitLogCode} lang=\"bash\" title={terminal} />\n\n    <Image src={qc_feedback2} alt=\"qc_feedback2\"/>\n\n3. For each Issue assigned to her, the QCer ensures that her current local commit matches the `initial qc commit` from the Issue metadata section.\n\n    <Image src={qc_feedback1} alt=\"qc_feedback1\"/>\n\n4. If the commits don't match, she can checkout the commit manually.\n\n    <Code code=\"git checkout 0916356\" lang=\"bash\" title={terminal} /> \n    \n</Steps>\n\n\n## QCer: Comment QC Feedback\n\n### Example\n\nQC feedback can be given directly by commenting in an Issue thread.\n\n<Image src={qc_feedback3} alt=\"qc_feedback3\"/>\n\nThe QCer can comment on one or more lines of code by copying a permalink from the file contents page in the metadata section.\n\n<Image src={qc_feedback5} alt=\"qc_feedback5\"/>\n\n### Demo\n<video controls width = \"700\">\n    <source src={qc_feedback4} type=\"video/mp4\" />\n</video>\n\n<Aside>\nTip to copy multiple lines: after selecting the first line, hold shift when selecting the last line, then click the three dots to copy the permalink.\n</Aside>\n\n\n## Author: Resolve QC findings\n\nexport const resolveAppCode = `# library(ghqc)\nghqc_resolve_app()`;\n\n<Steps>\n\n1. The Author views commented feedback from the QCer and responds if follow-up is necessary.\n\n2. The Author implements QC findings.\n\n3. The Author commits and pushes changes to the remote repository.\n\n4. The Author runs the Resolve app which creates an Issue comment intended to:\n\n    - Notify the QCer about QC file changes\n    - Inform the QCer on the current commit for QC\n    - Display a visual to the QCer with specific file changes \n\n    <Code code={resolveAppCode} lang=\"R\" title={console} />\n\n    \n\n</Steps>\n\n### Example\n\n<Image src={resolve1png} alt=\"resolve1png\"/>\n\nThe `current commit` in the metadata section gives the commit with the most up-to-date version of the file.\n\nThe QCer can pull changes from the branch or checkout the given commit to re-review the file with the pushed changes.\n\n### Demo\n<video controls width = \"700\">\n    <source src={resolve1mp4} type=\"video/mp4\" />\n</video>\n\n\n## QCer: Close Issues when QC is complete\n\nWhen the state of the file is to the QCer's satisfaction, each item in the Issue's checklist should be checked, and the Issue can be closed by the QCer.\n\n<video controls width = \"700\">\n    <source src={issue_closed} type=\"video/mp4\" />\n</video>\n\nIf the given Issue is the last open Issue in the Milestone (indicated by the full progress bar), the Milestone can be closed to mark its completion.\n\n<video controls width = \"700\">\n    <source src={milestone_closed} type=\"video/mp4\" />\n</video>\n\n\n## Author: Generate QC Record\n\nexport const recordAppCode = `# library(ghqc)\nghqc_record_app()`;\n\n<Code code={recordAppCode} lang=\"R\" title={console} />\n\nThis function allows the user to generate a QC Record for one or more Milestones created with ghqc_assign_app.\n\nThe QC Record is a pdf with summary tables and Issue contents within each selected Milestone.\n\n<video controls width = \"700\">\n    <source src={record1} type=\"video/mp4\" />\n</video>\n\n### Output\n\nThe QC Record begins with a Milestone Summary table.\n\nEach Milestone section contains an Issue Summary table with subsections for each ghqc Issue.\n\n<Image src={record1_png} alt=\"record1_png\"/>\n\n<Image src={record2_png} alt=\"record2_png\"/>\n\n<Image src={record3_png} alt=\"record3_png\"/>\n";
						const data = {title:"Workflow Overview",description:"summary",editUrl:true,head:[],template:"doc",sidebar:{hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/Users/jennaelwing/starlight/ghqc/ghqc-docs/src/content/docs/guides/2_summary.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
