const id = "guides/code-annotation.mdx";
						const collection = "docs";
						const slug = "guides/code-annotation";
						const body = "\nimport { Code } from '@astrojs/starlight/components';\n\n\n## Code Highlighting and Focus\n\n```r\nlibrary(ggplot2)\nggplot(Theoph, aes(x = Time, y = conc, group = Subject)) +\n  geom_point() +\n    geom_line() \n```\n\n\nexport const exampleCode = `\nlibrary(ggplot2)\nggplot(Theoph, aes(x = Time, y = conc)) +\n  geom_point() +\n  geom_line() \n`;\nexport const fileName = 'plot.R';\nexport const highlights = ['Time', 'conc'];\n\n<Code code={exampleCode} lang=\"r\" title={fileName} mark={highlights} />\n\nexport const exampleCode2ForDiff = `\nlibrary(ggplot2)\nggplot(Theoph, aes(x = Time, y = conc)) +\nggplot(Theoph, aes(x = Time, y = conc, group = Subject)) +\n  geom_point() +\n  geom_line() \n`;\n\nexport const exampleCode2 = `\nlibrary(ggplot2)\nggplot(Theoph, aes(x = Time, y = conc, group = Subject)) +\n  geom_point() +\n  geom_line() \n`;\n\nThis example shows the theoretical idea of adding the group=Subject for more grouping\n\n<Code code={exampleCode2ForDiff} lang=\"r\" title={fileName} mark={\"group = Subject\"} del={2} ins={3} />\n\nWe can both show a line level diff and a mark for the particular text of interest\n<Code code={exampleCode2ForDiff} lang=\"r\" title={fileName} mark={\"group = Subject\"} del={2} ins={3} />\n\n\nor visually highlight with a mark\n\n<Code code={exampleCode2} lang=\"r\" title={fileName} mark={\"group = Subject\"} />\n\nthough can actually target with the insertion itself instead of a mark\n\n<Code code={exampleCode2} lang=\"r\" title={fileName} ins={\"group = Subject\"} />\n\nThere are tons of options\n\n### Code with variables inside\n\nGiven a file `data.json` with the following content:\n\n```json\n{\n  \"domain_name\": \"https://a2-ai.cloud\",\n}\n```\n\nThis will not work, as data.domain_name will not be rendered\n\n````mdx\nimport data from \"./data.json\";\n\n```bash\ncurl {data.domain_name}\n```\n\n````\n\nInstead, you can use the `Code` component to render the code block:\n\n```mdx\nimport data from \"./data.json\";\n\n<Code code={`curl ${data.domain_name}`} lang=\"bash\" />\n```\n\n\n\n## Code Layout\n\n{/* Baseline\n<VersionedCode>\n<Version version={\">1.0\"}>\n<Code code={exampleCode} lang=\"r\"/>\n</Version>\n<Version version={\"<1.0\"}>\n<Code code={exampleCode} lang=\"r\"/>\n</Version>\n</VersionedCode> */}\n\nbash/sh/cmd/console languages will show as a terminal instead\n\n<Code code={\"curl https://example.com | jq\"} lang=\"bash\"/>\n\nA title: \n\n<Code code={exampleCode} lang=\"r\" title={\"some-script.R\"}/>\n\nThere a ton of ways to control how the terminal shows with conditional logic around\nthe title having an extention (implying a file) vs an actual title. You can also use\nregular code blocks instead of the code component just fine.\n\n```bash title=\"some-script\"\ncurl https://example.com | jq\n```\n\n```bash title=\"some-script.sh\"\ncurl https://example.com | jq\n```\n\nCode with shebangs/titles shows up as the code editor style\n\n\n<Code code={exampleCode} lang=\"r\" showLineNumbers />\n\nMore complicated blocks where line numbers are helpful we want to use the \n[line number plugin](https://expressive-code.com/plugins/line-numbers/)\nSee the `ec.config.mjs` for a reference. Note that as of Oct 2024 typescript does\nseem to yell at `plugins: [pluginLineNumbers()],` as not assignable, but it works fine.\n\nadd line numbers with `showLineNumbers`\n\n<Code code={`\n#!/bin/bash\nset -x\nif [[ $EUID -ne 0 ]]; then\n   echo \"This script must be run as root\" \n   exit 1\nfi\napt-get install gdebi-core\ncurl -O https://download2.rstudio.org/server/jammy/amd64/rstudio-workbench-2024.09.0-amd64.deb\ngdebi rstudio-workbench-2024.09.0-amd64.deb\n`} lang=\"sh\" title={\"install-workbench.sh\"} showLineNumbers/>\n\nor code itself:\n\n<Code code={exampleCode} lang=\"r\" showLineNumbers />\n\n\n\n";
						const data = {title:"Code Annotation",description:"Various options for showing and annotating code",editUrl:true,head:[],template:"doc",sidebar:{hidden:false,badge:{variant:"tip",text:"New"},attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/Users/jennaelwing/starlight/ghqc/ghqc-docs/src/content/docs/guides/code-annotation.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
